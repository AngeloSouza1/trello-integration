import os
import requests
from dotenv import load_dotenv

# Carregar credenciais do .env
load_dotenv()

TRELLO_API_KEY = os.getenv("TRELLO_API_KEY")
TRELLO_TOKEN = os.getenv("TRELLO_TOKEN")
TRELLO_BOARD_ID = os.getenv("TRELLO_BOARD_ID")

# Buscar todas as listas do board
LISTS_URL = f"https://api.trello.com/1/boards/{TRELLO_BOARD_ID}/lists"
params = {"key": TRELLO_API_KEY, "token": TRELLO_TOKEN}
response = requests.get(LISTS_URL, params=params)

if response.status_code != 200:
    print("‚ùå Erro ao buscar as listas:", response.text)
    exit()

lists = response.json()

# Definir ID da lista "Conclu√≠do"
list_done_id = None
for trello_list in lists:
    if trello_list["name"].strip().lower() == "conclu√≠do":
        list_done_id = trello_list["id"]
        print(f"‚úÖ Lista 'Conclu√≠do' detectada com ID: {list_done_id}")

# Estrutura de cards para cada lista (10 cards por lista)
tasks_per_category = [
    [  # üìå Lista: Desenvolvimento de Software
        {
            "name": "üíª Implementar API RESTful",
            "desc": """Criar uma API RESTful com autentica√ß√£o JWT.

Passos:
1Ô∏è‚É£ Criar rotas para CRUD de usu√°rios.
2Ô∏è‚É£ Implementar autentica√ß√£o segura com JWT.
3Ô∏è‚É£ Testar integra√ß√£o com o frontend.
4Ô∏è‚É£ Criar logs para monitoramento de erros.
5Ô∏è‚É£ Publicar API e documentar endpoints.

‚ö†Ô∏è Bloqueios poss√≠veis: Problemas na autentica√ß√£o, conflitos de vers√£o na API."""
        },
        {
            "name": "üõ† Otimizar Banco de Dados",
            "desc": """Melhorar a performance das consultas SQL.

Passos:
1Ô∏è‚É£ Analisar queries lentas e identificar gargalos.
2Ô∏è‚É£ Criar √≠ndices nas tabelas mais acessadas.
3Ô∏è‚É£ Implementar cache para reduzir tempo de resposta.
4Ô∏è‚É£ Testar performance antes e depois das otimiza√ß√µes.
5Ô∏è‚É£ Monitorar a estabilidade ap√≥s mudan√ßas.

‚ö†Ô∏è Bloqueios poss√≠veis: Erros na cria√ß√£o de √≠ndices, necessidade de refatora√ß√£o."""
        }
    ],
    [  # üìå Lista: Conclu√≠do (tarefas finalizadas)
        {
            "name": "‚úÖ Migrar Servidor para Nova Infraestrutura",
            "desc": """Finalizado: Migra√ß√£o de ambiente conclu√≠da com sucesso.

Passos Conclu√≠dos:
‚úîÔ∏è Configurar novo servidor.
‚úîÔ∏è Transferir dados e arquivos cr√≠ticos.
‚úîÔ∏è Testar aplica√ß√µes para garantir funcionalidade.
‚úîÔ∏è Atualizar configura√ß√µes DNS e verificar acessibilidade.
‚úîÔ∏è Monitorar performance p√≥s-migra√ß√£o.

üéâ Este projeto foi finalizado com √™xito!"""
        },
        {
            "name": "‚úÖ Implementa√ß√£o de Dashboard Anal√≠tico",
            "desc": """Finalizado: Novo painel anal√≠tico entregue.

Passos Conclu√≠dos:
‚úîÔ∏è Criar gr√°ficos interativos para visualiza√ß√£o de m√©tricas.
‚úîÔ∏è Implementar banco de dados para coleta de estat√≠sticas.
‚úîÔ∏è Otimizar queries para an√°lise em tempo real.
‚úîÔ∏è Integrar API para atualiza√ß√£o autom√°tica de dados.
‚úîÔ∏è Realizar testes finais e coletar feedbacks.

üéâ Dashboard em produ√ß√£o e operando corretamente!"""
        }
    ]
]

# Criar cards no Trello
def create_card_with_comment(list_id, card):
    """Cria um card no Trello e adiciona um coment√°rio relevante"""
    CREATE_CARD_URL = "https://api.trello.com/1/cards"
    params = {
        "key": TRELLO_API_KEY,
        "token": TRELLO_TOKEN,
        "idList": list_id,
        "name": card["name"],
        "desc": card["desc"]
    }
    response = requests.post(CREATE_CARD_URL, params=params)

    if response.status_code == 200:
        card_data = response.json()
        card_id = card_data["id"]
        print(f"‚úÖ Card '{card['name']}' criado com sucesso!")

        # Se o card estiver na lista "Conclu√≠do", adicionar etiqueta e checklist
        if list_id == list_done_id:
            add_label_to_card(card_id, "Finalizado", "green")
            add_checklist_to_card(card_id)

        # Adicionar coment√°rio no card
        add_comment_to_card(card_id, f"üîé Revis√£o conclu√≠da para: {card['name']}")
    else:
        print(f"‚ùå Erro ao criar '{card['name']}':", response.text)


def add_comment_to_card(card_id, comment_text):
    """Adiciona um coment√°rio a um card do Trello"""
    COMMENT_URL = f"https://api.trello.com/1/cards/{card_id}/actions/comments"
    params = {
        "key": TRELLO_API_KEY,
        "token": TRELLO_TOKEN,
        "text": comment_text
    }
    response = requests.post(COMMENT_URL, params=params)

    if response.status_code == 200:
        print(f"üí¨ Coment√°rio adicionado ao card!")
    else:
        print(f"‚ùå Erro ao adicionar coment√°rio ao card:", response.text)


def add_label_to_card(card_id, label_name, color):
    """Adiciona uma etiqueta a um card do Trello"""
    LABEL_URL = f"https://api.trello.com/1/cards/{card_id}/labels"
    params = {
        "key": TRELLO_API_KEY,
        "token": TRELLO_TOKEN,
        "name": label_name,
        "color": color
    }
    response = requests.post(LABEL_URL, params=params)

    if response.status_code == 200:
        print(f"üè∑Ô∏è Etiqueta '{label_name}' adicionada ao card!")
    else:
        print(f"‚ùå Erro ao adicionar etiqueta:", response.text)


def add_checklist_to_card(card_id):
    """Adiciona um checklist a um card do Trello e marca todas as tarefas como conclu√≠das"""
    CHECKLIST_URL = f"https://api.trello.com/1/cards/{card_id}/checklists"
    params = {
        "key": TRELLO_API_KEY,
        "token": TRELLO_TOKEN,
        "name": "Tarefas Conclu√≠das"
    }
    response = requests.post(CHECKLIST_URL, params=params)

    if response.status_code == 200:
        checklist_id = response.json()["id"]
        print(f"‚úÖ Checklist adicionado ao card!")
        add_checklist_items(checklist_id)
    else:
        print(f"‚ùå Erro ao adicionar checklist:", response.text)


def add_checklist_items(checklist_id):
    """Marca todas as tarefas como conclu√≠das no checklist"""
    items = ["Tarefa 1", "Tarefa 2", "Tarefa 3", "Tarefa 4", "Tarefa 5"]

    for item in items:
        CHECKITEM_URL = f"https://api.trello.com/1/checklists/{checklist_id}/checkItems"
        params = {
            "key": TRELLO_API_KEY,
            "token": TRELLO_TOKEN,
            "name": item,
            "checked": "true"  # Marcar como conclu√≠do
        }
        response = requests.post(CHECKITEM_URL, params=params)
        if response.status_code == 200:
            print(f"‚úîÔ∏è Item '{item}' marcado como conclu√≠do!")
        else:
            print(f"‚ùå Erro ao adicionar item '{item}':", response.text)


# Criar 10 cards para cada lista dispon√≠vel no Trello
for i, trello_list in enumerate(lists):
    list_id = trello_list["id"]
    list_name = trello_list["name"]

    print(f"\nüîπ Criando cards para a lista '{list_name}'...")

    tasks = tasks_per_category[i % len(tasks_per_category)]
    for card in tasks:
        create_card_with_comment(list_id, card)
