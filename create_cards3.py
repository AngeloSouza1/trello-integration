import os
import requests
from dotenv import load_dotenv

# Carregar credenciais do .env
load_dotenv()

TRELLO_API_KEY = os.getenv("TRELLO_API_KEY")
TRELLO_TOKEN = os.getenv("TRELLO_TOKEN")
TRELLO_BOARD_ID = os.getenv("TRELLO_BOARD_ID")

# Buscar todas as listas do board
LISTS_URL = f"https://api.trello.com/1/boards/{TRELLO_BOARD_ID}/lists"
params = {"key": TRELLO_API_KEY, "token": TRELLO_TOKEN}
response = requests.get(LISTS_URL, params=params)

if response.status_code != 200:
    print("‚ùå Erro ao buscar as listas:", response.text)
    exit()

lists = response.json()

# Definir ID da lista "Conclu√≠do"
list_done_id = None
for trello_list in lists:
    if trello_list["name"].strip().lower() == "conclu√≠do":
        list_done_id = trello_list["id"]
        print(f"‚úÖ Lista 'Conclu√≠do' detectada com ID: {list_done_id}")

# Estrutura de **5 cards detalhados por lista**
tasks_template = [
    {
        "name": "üíª Implementar API RESTful",
        "desc": """**Objetivo:** Criar uma API RESTful eficiente e segura.

**Requisitos:**
- Suporte a autentica√ß√£o JWT
- CRUD completo de usu√°rios e permiss√µes
- Documenta√ß√£o via Swagger ou Postman

**Passos para implementa√ß√£o:**
1Ô∏è‚É£ Criar banco de dados e definir schema.
2Ô∏è‚É£ Criar rotas GET, POST, PUT e DELETE para os usu√°rios.
3Ô∏è‚É£ Implementar autentica√ß√£o e autoriza√ß√£o com JWT.
4Ô∏è‚É£ Criar testes automatizados para valida√ß√£o.
5Ô∏è‚É£ Documentar e publicar API.

‚ö†Ô∏è **Poss√≠veis Bloqueios:** Erros de integra√ß√£o com frontend, necessidade de ajustes na seguran√ßa."""
    },
    {
        "name": "üõ† Otimizar Banco de Dados",
        "desc": """**Objetivo:** Melhorar a performance e escalabilidade do banco.

**Requisitos:**
- Identifica√ß√£o de queries lentas
- Cria√ß√£o de √≠ndices para otimiza√ß√£o
- Implementa√ß√£o de cache em camadas

**Passos para otimiza√ß√£o:**
1Ô∏è‚É£ Analisar logs de consultas para identificar gargalos.
2Ô∏è‚É£ Criar √≠ndices eficientes em colunas estrat√©gicas.
3Ô∏è‚É£ Implementar cache para reduzir carga no banco.
4Ô∏è‚É£ Testar melhorias em ambiente de homologa√ß√£o.
5Ô∏è‚É£ Monitorar m√©tricas de desempenho.

‚ö†Ô∏è **Poss√≠veis Bloqueios:** Impacto negativo em queries existentes, necessidade de refatora√ß√£o."""
    },
    {
        "name": "üìä Criar Dashboard Anal√≠tico",
        "desc": """**Objetivo:** Criar um painel de m√©tricas em tempo real.

**Requisitos:**
- Conex√£o com banco de dados e APIs externas
- Gr√°ficos interativos e filtros avan√ßados
- Suporte a exporta√ß√£o de relat√≥rios

**Passos para cria√ß√£o:**
1Ô∏è‚É£ Definir KPIs e m√©tricas relevantes.
2Ô∏è‚É£ Criar layout do painel e design responsivo.
3Ô∏è‚É£ Implementar consultas otimizadas no backend.
4Ô∏è‚É£ Criar visualiza√ß√µes din√¢micas com gr√°ficos interativos.
5Ô∏è‚É£ Testar usabilidade e performance.

‚ö†Ô∏è **Poss√≠veis Bloqueios:** Baixo desempenho em queries, dificuldades na integra√ß√£o com APIs."""
    },
    {
        "name": "üì¶ Automatizar Deploy no AWS",
        "desc": """**Objetivo:** Criar um pipeline de CI/CD para automa√ß√£o de deploys.

**Requisitos:**
- Uso de GitHub Actions ou Jenkins
- Deploy autom√°tico na AWS (Lambda, EC2 ou S3)
- Monitoramento e rollback autom√°tico

**Passos para implementa√ß√£o:**
1Ô∏è‚É£ Configurar pipeline no reposit√≥rio.
2Ô∏è‚É£ Criar scripts para automa√ß√£o de build e deploy.
3Ô∏è‚É£ Testar integra√ß√£o cont√≠nua com ambiente de staging.
4Ô∏è‚É£ Implementar logs e alertas para falhas.
5Ô∏è‚É£ Validar seguran√ßa e permiss√µes de acesso.

‚ö†Ô∏è **Poss√≠veis Bloqueios:** Erros de autentica√ß√£o AWS, necessidade de ajustes nos scripts."""
    },
    {
        "name": "üîê Melhorar Seguran√ßa do Sistema",
        "desc": """**Objetivo:** Fortalecer a seguran√ßa da aplica√ß√£o.

**Requisitos:**
- Implementa√ß√£o de autentica√ß√£o multifator
- Encripta√ß√£o de dados sens√≠veis
- Monitoramento de acessos suspeitos

**Passos para implementa√ß√£o:**
1Ô∏è‚É£ Adicionar autentica√ß√£o multifator (2FA).
2Ô∏è‚É£ Implementar logs para auditoria de acessos.
3Ô∏è‚É£ Revisar permiss√µes de usu√°rios e tokens de acesso.
4Ô∏è‚É£ Implementar encripta√ß√£o de dados cr√≠ticos.
5Ô∏è‚É£ Realizar testes de seguran√ßa e simula√ß√µes de ataques.

‚ö†Ô∏è **Poss√≠veis Bloqueios:** Complexidade na implementa√ß√£o, impacto na experi√™ncia do usu√°rio."""
    }
]

# Criar cards no Trello
def create_card_with_comment(list_id, card):
    """Cria um card no Trello e adiciona um coment√°rio relevante"""
    CREATE_CARD_URL = "https://api.trello.com/1/cards"
    params = {
        "key": TRELLO_API_KEY,
        "token": TRELLO_TOKEN,
        "idList": list_id,
        "name": card["name"],
        "desc": card["desc"]
    }
    response = requests.post(CREATE_CARD_URL, params=params)

    if response.status_code == 200:
        card_data = response.json()
        card_id = card_data["id"]
        print(f"‚úÖ Card '{card['name']}' criado com sucesso!")

        # Se o card estiver na lista "Conclu√≠do", adicionar etiqueta e checklist
        if list_id == list_done_id:
            add_label_to_card(card_id, "Finalizado", "green")
            add_checklist_to_card(card_id)

        # Adicionar coment√°rio no card
        add_comment_to_card(card_id, f"üîé Revis√£o conclu√≠da para: {card['name']}")
    else:
        print(f"‚ùå Erro ao criar '{card['name']}':", response.text)


def add_comment_to_card(card_id, comment_text):
    """Adiciona um coment√°rio a um card do Trello"""
    COMMENT_URL = f"https://api.trello.com/1/cards/{card_id}/actions/comments"
    params = {
        "key": TRELLO_API_KEY,
        "token": TRELLO_TOKEN,
        "text": comment_text
    }
    response = requests.post(COMMENT_URL, params=params)

    if response.status_code == 200:
        print(f"üí¨ Coment√°rio adicionado ao card!")
    else:
        print(f"‚ùå Erro ao adicionar coment√°rio ao card:", response.text)


def add_label_to_card(card_id, label_name, color):
    """Adiciona uma etiqueta a um card do Trello"""
    LABEL_URL = f"https://api.trello.com/1/cards/{card_id}/labels"
    params = {
        "key": TRELLO_API_KEY,
        "token": TRELLO_TOKEN,
        "name": label_name,
        "color": color
    }
    response = requests.post(LABEL_URL, params=params)

    if response.status_code == 200:
        print(f"üè∑Ô∏è Etiqueta '{label_name}' adicionada ao card!")
    else:
        print(f"‚ùå Erro ao adicionar etiqueta:", response.text)


# Criar 5 cards para cada lista no Trello
for trello_list in lists:
    list_id = trello_list["id"]
    list_name = trello_list["name"]

    print(f"\nüîπ Criando 5 cards para a lista '{list_name}'...")

    for card in tasks_template:
        create_card_with_comment(list_id, card)
